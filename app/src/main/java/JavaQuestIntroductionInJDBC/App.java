/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package JavaQuestIntroductionInJDBC;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class App {

    private Connection conn = null;
    private PreparedStatement pstmt = null;
    private ResultSet rs = null;

    private void sqlQuery() throws SQLException {

        // Variable declarations
        final String DRIVER = "com.mysql.cj.jdbc.Driver";
          // So that Injection becomes vulnerable
        final String DBURL = "jdbc:mysql://localhost:3307/wild_db_quest?allowMultiQueries=true";
        final String DBUSER = "dbadm";
        final String DBPASSWORD = "Start123#";

        // Connect to database
        try {
            Class.forName(DRIVER);
        } catch (ClassNotFoundException e) {
            System.out.println("DB driver not found");
        }
        
        conn = DriverManager.getConnection(DBURL, DBUSER, DBPASSWORD);

        
        // Generate Table
        String sql_table_drop = "DROP TABLE IF EXISTS persons;";
        pstmt = conn.prepareStatement(sql_table_drop);
        pstmt.execute();

        String sql_table_create = "CREATE TABLE persons "
            + "("
            + "firstname VARCHAR(30), "
            + "lastname VARCHAR(30), "
            + "age INT"
            + ");";
        pstmt = conn.prepareStatement(sql_table_create);
        pstmt.execute();

        // Insert new records in the table persons
        conn.setAutoCommit(false);
        String sql_table_insert = "INSERT INTO persons (firstname, lastname, age) VALUES (?, ?, ?)";
        pstmt = conn.prepareStatement(sql_table_insert);
        pstmt.setString(1, "John");
        pstmt.setString(2, "Smith");
        pstmt.setInt(3, 31);
        pstmt.addBatch();

        pstmt.setString(1, "Sarah");
        pstmt.setString(2, "Connor");
        pstmt.setInt(3, 29);
        pstmt.addBatch();

        pstmt.setString(1, "Terminator");
        pstmt.setString(2, "T-800");
        pstmt.setInt(3, 2);
        pstmt.addBatch();

        pstmt.setString(1, "Kyle");
        pstmt.setString(2, "Reese");
        pstmt.setInt(3, 34);
        pstmt.addBatch();

        int[] addStatus = pstmt.executeBatch();
        conn.commit();
        conn.setAutoCommit(true);
        for (int i = 0; i < addStatus.length; i++) {
            if (addStatus[i] > 0) {
                System.out.println("Record is inserted successfully.");
            } else {
                System.out.println("Insert: Something went wrong.");
            }
        }
        System.out.println();

        // Retrieve data type from records
        String sql_schema_select = "SELECT DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS " + 
                                   "WHERE TABLE_SCHEMA = 'wild_db_quest' AND TABLE_NAME = 'persons' " +
                                   "ORDER BY ORDINAL_POSITION;";
        rs = pstmt.executeQuery(sql_schema_select);
        while(rs.next()) {
            System.out.printf("%-11s", rs.getString(1));
        }
        System.out.println();
        // Retrieve all records from the persons table
        String sql_table_select = "SELECT * FROM persons;";
        rs = pstmt.executeQuery(sql_table_select);
        while(rs.next()) {
            System.out.printf("%-11s%-11s%-11s%n", rs.getString(1), rs.getString(2), rs.getString(3));
        }

        // Update the lastname of the record from the persons table
        String sql_table_update = "UPDATE persons SET lastname = ? WHERE lastname = 'Smith'";
        pstmt = conn.prepareStatement(sql_table_update);
        pstmt.setString(1, "Connor");
        int updateStatus = pstmt.executeUpdate();
        if (updateStatus > 0) {
            System.out.println("\nRecord is updated successfully.");
        } else {
            System.out.println("\nUpdate: Something went wrong.");
        }

        String sql_table_select_john = "SELECT * FROM persons WHERE firstname = 'John';";
        rs = pstmt.executeQuery(sql_table_select_john);
        while(rs.next()) {
            System.out.printf("%-11s%-11s%-11s%n", rs.getString(1), rs.getString(2), rs.getString(3));
        }
        System.out.println();

        // Terminate two records from the persons table
        conn.setAutoCommit(false);
        String sql_table_delete = "DELETE FROM persons WHERE firstname = ?";
        pstmt = conn.prepareStatement(sql_table_delete);
        pstmt.setString(1, "Kyle");
        pstmt.addBatch();

        pstmt.setString(1, "Sarah");
        pstmt.addBatch();

        int[] deleteStatus = pstmt.executeBatch();
        conn.commit();
        conn.setAutoCommit(true);
        for (int i = 0; i < deleteStatus.length; i++) {
            if (deleteStatus[i] > 0) {
                System.out.println("Record is terminated successfully.");
            } else {
                System.out.println("Terminate: Something went wrong.");
            }
        }

        sql_table_select = "SELECT * FROM persons;";
        rs = pstmt.executeQuery(sql_table_select);
        while(rs.next()) {
            System.out.printf("%-11s%-11s%-11s%n", rs.getString(1), rs.getString(2), rs.getString(3));
        }
        System.out.println();

        // The machines take over the world with some bad injections
        System.out.println("\nSkynet makes a database query.");
        System.out.println("Skynet knows that a person's first name is John.");
        System.out.println("So Skynet makes a query with a special first name to view all entries: 'John' OR '1 = 1'");
        String fName1 = "John' OR '1 = 1";
        String sql_table_select_bad1 = "SELECT * FROM persons WHERE firstname = '" + fName1 + "'";
        System.out.println("\n[" + sql_table_select_bad1 + "]\n");
        rs = pstmt.executeQuery(sql_table_select_bad1);
        while(rs.next()) {
            System.out.printf("%-11s%-11s%-11s%n", rs.getString(1), rs.getString(2), rs.getString(3));
        }
        System.out.println();

        System.out.println("\nSkynet is not amused about the table entries and especially from John Connor.");
        System.out.println("So Skynet decides to destroy the world completely. Starting with this persons table.");
        System.out.println("Skynet makes a query with a special last name to terminate the person table:");
        System.out.println("Connors'; DROP TABLE persons; --");
        String fName2 = "John";
        String lName2 = "Connors'; DROP TABLE persons; --";
        String sql_table_select_bad2 = "SELECT * FROM persons WHERE firstname = '" + fName2 + "' " + "AND lastname = '" + lName2 + "";
        System.out.println("\n[" + sql_table_select_bad2 + "]");
        rs = pstmt.executeQuery(sql_table_select_bad2);
        // Show that table persons was terminated
        DatabaseMetaData md = conn.getMetaData();
        ResultSet rs = md.getTables(conn.getCatalog(), null, "%", new String [] {"TABLE"});  /* thx to stackoverflow :-) */
        System.out.println("\nRemaining tables:");
        while (rs.next()) {
            System.out.println(rs.getString(3));
        }

        System.out.println("\n");
        System.out.println("MUUHAHAHAHA... The machines win... Goodbye Mankind!!!");

        // Ending Ceremony
        rs.close();
        pstmt.close();
        conn.close();
    }

    public static void main(String[] args) throws SQLException{
        App sqlCreateApp = new App();
        sqlCreateApp.sqlQuery();
    }
}
